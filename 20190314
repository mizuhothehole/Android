coding rules

java：

１）クラス内部の並べ順はフィルド、メソッド、内部クラスの順番で。
２）エディターの右の縦線を超えないようにする。適切の場合、トークンの間に改行する。

新機能：

１）システムサービスの追加：フィルドの追加とgetterの追加
２）新しいバックグラウンドタスクの追加
３）新しいブロードキャストレシバーの追加（静的、動的）。Manifest.xml対応。
４）大量データ処理用サービス、Binder部品、サービスの公開をしないで欲しい。
５）もしくは他のアプリと連携する用ContentProviderなどの追加する場合。
　　セキュリティ上のリスクを深く考えて欲しいです。例えば、ContentProviderにデータを請求する時、アプリ内定義した権限のチェックの追加、
  　clientアプリ署名のチェック、などなどの対応お願いできますでしょうか。
   権限のチェック：
   https://stackoverflow.com/questions/30097365/how-does-content-providers-application-specify-permissions-that-client-apps-nee
   署名のチェック(signature)：
   https://developer.android.com/guide/topics/manifest/permission-element.html#plevel
   上記の上に、さらに「getCallingUid」や「getCallingPackage」などのチェックが必要です。
６）新画面のManifest.xmlにActivity追加。
７）Moduleの追加。手順。

Android SharedMemory:大量のデータをプロセス間短時間で渡すための設計されたAPI？？

package com.example.ishiiaya.myapplication;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.os.SharedMemory;
import android.system.ErrnoException;
import android.util.Log;

import java.nio.ByteBuffer;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        try {
            SharedMemory sm = SharedMemory.create("qinmm", 100);
            Log.d("qin", "" + sm.getSize());
            ByteBuffer bf = sm.mapReadWrite();
            bf.put((byte) 0xC3);
            bf.put((byte) 0xBF);
            bf.put("hahaha".getBytes());
            ByteBuffer bfnew = sm.mapReadOnly();
            byte[] sss = new byte[]{bfnew.get(0), bfnew.get(1), bfnew.get(2), bfnew.get(3)};
            Log.d("qin", "" + new String(sss));
            sm.close();
        } catch (ErrnoException ignored) {
        }
    }
}

03-14 21:09:32.475 17693-17693/com.example.ishiiaya.myapplication D/qin: 100
03-14 21:09:32.475 17693-17693/com.example.ishiiaya.myapplication D/qin: ÿha
